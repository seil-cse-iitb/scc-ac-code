#include <SPI.h>
#include <RF24.h>
#include <nRF24L01.h>
#include <IRremote.h>
#include <LowPower.h>

IRsend irsend;

const int khz = 38;

const int pinCE = 7;
const int pinCSN = 8;
RF24 radio(pinCE, pinCSN);

//const uint64_t rAddress = 0x00001E201BLL; // DO CHECK THE ADDRESS BEFORE PROGRAMMING IT
const uint64_t rAddress = 0x00001E5205LL;   // Address for 201

char ac_state = '\0';
bool serRead = false;
bool received = false;
int receivedCount = 0;

// Hitachi VRF - SEIL Lab
//unsigned int Signal_ON[] = {3488, 1584, 548, 1184, 520, 348, 520, 348, 544, 348, 520, 344, 524, 344, 520, 372, 524, 344, 520, 348, 544, 348, 544, 324, 520, 344, 548, 1188, 544, 320, 548, 320, 572, 320, 548, 320, 544, 324, 544, 348, 544, 320, 548, 320, 572, 320, 548, 320, 544, 320, 524, 372, 544, 320, 548, 320, 548, 344, 520, 348, 520, 348, 544, 1188, 520, 348, 548, 1156, 524, 1212, 544, 1160, 548, 1160, 548, 1184, 548, 1160, 548, 320, 544, 1188, 520, 1188, 548, 1160, 544, 1188, 520, 1188, 520, 1188, 520, 1212, 544, 1164, 520, 1184, 548, 348, 544, 320, 548, 320, 548, 344, 548, 320, 548, 320, 544, 348, 544, 324, 544, 320, 572, 1164, 516, 1188, 520, 348, 544, 348, 520, 1188, 520, 1188, 544, 1188, 544, 1164, 544, 320, 548, 348, 544, 1160, 548, 1160, 572, 320, 548, 320, 544, 324, 544, 1188, 520, 348, 520, 344, 548, 1188, 520, 344, 520, 348, 520, 372, 520, 1188, 520, 344, 524, 1212, 520, 1188, 544, 320, 576, 1160, 520, 1184, 548, 1160, 544, 348, 520, 1188, 520, 348, 544, 348, 544, 324, 520, 344, 520, 376, 520, 344, 520, 348, 544, 348, 520, 1188, 520, 1188, 544, 1188, 544, 1168, 516, 1188, 544, 1188, 544, 1160, 548, 1160, 576, 1160, 520, 1184, 524, 1184, 548, 1188, 544, 1160, 520, 348, 544, 348, 520, 348, 544, 320, 528, 368, 520, 344, 548, 320, 548, 344, 548, 1160, 544, 1164, 572, 1160, 548, 1160, 520, 1188, 544, 1188, 520, 1188, 520, 344, 548, 348, 544, 320, 520, 348, 520, 372, 520, 348, 520, 348, 544, 348, 544, 1164, 520, 1184, 544, 1188, 548, 320, 548, 1160, 520, 1212, 548, 320, 548, 320, 520, 372, 520, 1184, 524, 344, 548, 1188, 520, 344, 524, 344, 548, 1184, 548, 1160, 520, 1188, 544, 348, 544, 1164, 544, 1164, 572, 320, 544, 320, 548, 320, 548, 344, 520, 348, 520, 344, 548, 348, 520, 344, 548, 1160, 520, 1212, 524, 1188, 544, 1160, 520, 1212, 520, 1188, 572, 1136, 548, 344, 548, 320, 548, 316, 548, 348, 544, 1160, 524, 344, 572, 320, 548, 1160, 520, 1188, 520, 1212, 520, 1188, 520, 1188, 544, 348, 544, 1164, 544, 1160, 548, 320, 548};
//unsigned int Signal_OFF[] = {3488, 1608, 544, 1160, 524, 372, 544, 320, 548, 320, 520, 372, 520, 348, 548, 320, 544, 348, 520, 344, 524, 344, 548, 344, 520, 348, 548, 1160, 544, 348, 544, 324, 520, 344, 548, 348, 544, 320, 572, 296, 520, 372, 520, 348, 544, 320, 548, 348, 544, 320, 520, 348, 548, 344, 520, 348, 520, 348, 544, 348, 544, 324, 520, 1184, 548, 348, 516, 1192, 544, 1160, 520, 1212, 548, 1160, 544, 1164, 520, 1212, 520, 348, 548, 1160, 544, 1188, 520, 1188, 520, 1184, 524, 1212, 544, 1164, 520, 1184, 524, 1212, 520, 1188, 544, 320, 548, 344, 548, 320, 548, 320, 544, 348, 544, 324, 544, 320, 548, 344, 520, 348, 548, 1160, 520, 1212, 520, 348, 548, 320, 520, 1212, 548, 1160, 544, 1160, 548, 1188, 520, 344, 524, 344, 548, 1184, 520, 1188, 548, 320, 548, 344, 520, 352, 544, 1160, 520, 372, 520, 344, 524, 1184, 548, 344, 520, 348, 520, 348, 544, 1188, 520, 348, 544, 1160, 524, 1212, 520, 344, 548, 1160, 548, 1188, 544, 1160, 548, 320, 520, 1212, 520, 348, 520, 348, 520, 372, 524, 340, 548, 320, 524, 372, 520, 344, 520, 348, 544, 1188, 520, 1188, 520, 1188, 544, 1188, 520, 1188, 520, 1188, 572, 1160, 520, 1184, 548, 1160, 524, 1212, 520, 1184, 524, 1184, 548, 1188, 516, 348, 548, 320, 544, 348, 520, 348, 520, 344, 548, 348, 520, 344, 548, 320, 548, 1184, 548, 1160, 548, 1160, 548, 1184, 520, 348, 548, 320, 520, 372, 520, 1188, 520, 344, 544, 348, 520, 348, 520, 348, 544, 1188, 520, 1188, 520, 1188, 544, 348, 520, 1184, 548, 1160, 524, 372, 520, 1184, 548, 1160, 520, 372, 548, 320, 544, 324, 520, 1212, 520, 348, 520, 1184, 524, 372, 544, 320, 544, 1164, 544, 1188, 520, 1188, 520, 348, 572, 1160, 520, 1188, 548, 320, 544, 348, 516, 348, 548, 320, 520, 372, 520, 348, 544, 324, 520, 372, 544, 1164, 520, 1184, 520, 1216, 516, 1192, 544, 1160, 548, 1188, 544, 1160, 520, 348, 548, 344, 520, 348, 548, 320, 544, 348, 520, 1184, 524, 344, 544, 1188, 524, 1184, 520, 1188, 544, 1188, 520, 1188, 520, 1188, 572, 320, 544, 1164, 548, 320, 544};

// O-General Classroom
unsigned int Signal_ON[] = {3388, 1508, 496, 320, 524, 296, 520, 1112, 520, 296, 496, 1136, 524, 296, 496, 320, 520, 296, 520, 1112, 496, 1140, 520, 296, 496, 320, 496, 324, 520, 1112, 520, 1112, 524, 296, 492, 324, 496, 320, 496, 320, 520, 296, 520, 296, 524, 296, 496, 320, 520, 296, 496, 320, 504, 312, 524, 296, 520, 296, 520, 1112, 524, 292, 524, 296, 496, 320, 496, 320, 524, 292, 496, 320, 524, 296, 520, 1112, 520, 296, 496, 324, 492, 324, 496, 320, 520, 1112, 520, 1116, 520, 1112, 496, 1136, 496, 1140, 496, 1136, 524, 1112, 520, 1112, 496, 320, 520, 296, 496, 1140, 520, 296, 520, 296, 520, 300, 520, 296, 492, 324, 496, 320, 496, 320, 520, 296, 524, 1112, 520, 1112, 496, 320, 524, 296, 492, 1140, 496, 320, 520, 296, 496, 324, 520, 296, 520, 296, 496, 1136, 496, 324, 520, 1112, 520, 296, 520, 300, 520, 296, 492, 324, 520, 296, 520, 296, 496, 320, 524, 296, 520, 296, 520, 296, 496, 320, 496, 320, 520, 300, 492, 324, 520, 296, 520, 296, 524, 292, 496, 324, 520, 296, 520, 296, 520, 296, 520, 296, 496, 324, 492, 324, 496, 320, 520, 296, 496, 320, 496, 324, 492, 324, 496, 320, 524, 292, 520, 296, 524, 296, 492, 324, 520, 296, 520, 296, 524, 292, 496, 324, 520, 296, 520, 296, 520, 296, 520, 296, 524, 296, 492, 324, 520, 1112, 496, 320, 520, 300, 520, 296, 496, 1136, 524, 1112, 496, 1136, 496, 320, 496, 1140, 520, 1112, 520, 296, 520};
unsigned int Signal_OFF[] = {3392, 1532, 520, 296, 496, 320, 524, 1112, 496, 320, 496, 1136, 520, 296, 524, 296, 520, 296, 524, 1108, 496, 1140, 496, 320, 520, 296, 524, 292, 524, 1112, 520, 1112, 496, 320, 524, 292, 524, 296, 496, 320, 520, 296, 524, 292, 524, 292, 524, 296, 520, 296, 496, 320, 520, 296, 520, 296, 524, 296, 496, 1136, 520, 296, 524, 292, 524, 296, 520, 296, 524, 292, 520, 296, 520, 296, 524, 1112, 496, 320, 520, 296, 524, 292, 524, 296, 520, 1112, 496, 320, 520, 296, 524, 296, 496, 320, 520, 296, 524, 292, 524, 1108, 524, 296, 520, 1112, 520, 1116, 492, 1140, 548, 1084, 496, 1140, 520, 1120, 512};

void radioListen()
{
  
  while (radio.available())
  {
    radio.read(&ac_state, sizeof(ac_state));
    received = true;
  }
}

void turn_on_ac()
{
  irsend.sendRaw(Signal_ON, sizeof(Signal_ON) / sizeof(Signal_ON[0]), khz);
  delay(100);
  Serial.println("Turning ON AC");
}

void turn_off_ac()
{
  irsend.sendRaw(Signal_OFF, sizeof(Signal_OFF) / sizeof(Signal_OFF[0]), khz);
  delay(100);
  Serial.println("Turning OFF AC");
}

void initRadio()
{
  radio.begin();
  //radio.setAutoAck(1);
  radio.setRetries(15, 15);
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MIN);
  radio.setChannel(105);
  radio.openReadingPipe(1, rAddress);
  radio.startListening();
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial.println(F("____nRF_IR_Testing____"));
  Serial.println(F(""));

  initRadio();
}

void loop() {
  // put your main code here, to run repeatedly:
  while (Serial.available())
  {
    ac_state = Serial.read();
    serRead = true;
  }

  if (serRead || received)
  {
    radio.stopListening();
    if (ac_state == '1') turn_on_ac();
    else if (ac_state == '0') turn_off_ac();
    else Serial.println(F("Bad Data"));

    serRead = false;
    received = false;

    receivedCount++;

    radio.startListening();
  }

  if(receivedCount < 2) radioListen();
  else
  {
    //radio.powerDown();
    //LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
    delay(6000);
    receivedCount = 0;
  }
            }
